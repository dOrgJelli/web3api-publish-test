scalar UInt
scalar UInt8
scalar UInt16
scalar UInt32
scalar UInt64
scalar Int
scalar Int8
scalar Int16
scalar Int32
scalar Int64
scalar Bytes

directive @imported(
  uri: String!
  namespace: String!
  nativeType: String!
) on OBJECT | ENUM

directive @imports(
  types: [String!]!
) on OBJECT

type CustomType {
  str: String!
  optStr: String
  u: UInt!
  optU: UInt
  u8: UInt8!
  u16: UInt16!
  u32: UInt32!
  u64: UInt64!
  i: Int!
  i8: Int8!
  i16: Int16!
  i32: Int32!
  i64: Int64!
  bytes: Bytes!
  optBytes: Bytes
  boolean: Boolean!
  optBoolean: Boolean
  uArray: [UInt!]!
  uOptArray: [UInt!]
  optUOptArray: [UInt]
  optStrOptArray: [String]
  uArrayArray: [[UInt!]!]!
  uOptArrayOptArray: [[UInt64]]!
  uArrayOptArrayArray: [[[UInt64!]!]]!
  crazyArray: [[[[UInt64!]]!]]
  object: AnotherType!
  optObject: AnotherType
  objectArray: [AnotherType!]!
  optObjectArray: [AnotherType]
}

type AnotherType {
  prop: String
  circular: CustomType!
}

type Query @imports(
  types: [ "TestImport_Query" ]
) {
  queryMethod(
    arg: String!
  ): Int!

  objectMethod(
    object: AnotherType!
    optObject: AnotherType
    objectArray: [AnotherType!]!
    optObjectArray: [AnotherType]
  ): AnotherType
}

type TestImport_Query @imported(
  uri: "testimport.uri.eth",
  namespace: "TestImport",
  nativeType: "Query"
) {
  importedMethod(
    str: String!
    optStr: String
    u: UInt!
    optU: UInt
    uArrayArray: [[UInt]]!
    object: TestImport_Object!
    optObject: TestImport_Object
    objectArray: [TestImport_Object!]!
    optObjectArray: [TestImport_Object]
  ): TestImport_Object

  anotherMethod(
    arg: [String!]!
  ): Int64!
}

type TestImport_Object @imported(
  uri: "testimport.uri.eth",
  namespace: "TestImport",
  nativeType: "Object"
) {
  object: TestImport_AnotherObject!
  optObject: TestImport_AnotherObject
  objectArray: [TestImport_AnotherObject!]!
  optObjectArray: [TestImport_AnotherObject]
}

type TestImport_AnotherObject @imported(
  namespace: "TestImport",
  uri: "testimport.uri.eth",
  nativeType: "AnotherObject"
) {
  prop: String!
}
